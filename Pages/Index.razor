@page "/"
@using Pipseek.Models;
@using Pipseek.Model;
@using Pipseek.Services;
@using Radzen;
@using Smart.Blazor;

@inject IDailyTaskRepository dailyTaskRepository
@inject IUserService userService
@inject DialogService DialogService

<div class="row">
	<div class="col-md-6">
        @*Task List*@
        <div class="row d-flex justify-content-center align-items-center">
          <div class="col-md-12 col-xl-10">

            <div class="card bg-light bg-opacity-25 bg-gradient">
              <div class="card-header p-3">
                  <div class="row align-middle">
                      <div class="col-md-9">
                <h5 class="mb-0">
                    <i class="fas fa-tasks me-2"></i>My Tasks
                </h5>
                </div>
                      <div class="col-md-3">
                    <button class="btn btn-sm btn-outline-success" @onclick="(async)=>AddTaskAsync()"><i class="fas fa-plus text-success me-3"></i>Add Task</button>
                    </div>
                  </div>
              </div>
              <div class="card-body" data-mdb-perfect-scrollbar="true" style="position: relative; height: 400px">

                <table class="table mb-0">
                  <thead>
                    <tr>

                      <th scope="col">Task</th>
                      <th scope="col">Time of Day</th>
                      <th scope="col">Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                  
                    @foreach(var task in this.Tasks)
                                {
                    <tr class="fw-normal">
 
                      <td class="border-0 align-middle"><button class="btn" @onclick="(async)=>ShowInlineDialog(task)">@task.Note</button></td>
                      <td class="border-0 align-middle">
                        <h6 class="mb-0"><button class="badge @this.GetBadgeColor(task.TimeOfDay)" @onclick="(async)=>CycleTimeOfDayAsync(task)">@task.TimeOfDay</button></h6>
                      </td>
                      <td class="border-0 align-middle">
                        <a href="#!" data-mdb-toggle="tooltip" title="Done" @onclick="(async)=>CompleteTaskAsync(task)"><i class="fas fa-check text-success me-3"></i></a>
                        <a href="#!" data-mdb-toggle="tooltip" title="Remove" @onclick="(async)=>DeleteTaskAsync(task)"><i class="fas fa-trash-alt text-warning"></i></a>
                      </td>
                    </tr>
                                }

                  </tbody>
                </table>

              </div>

            </div>
    </div>
</div>
	</div>
	<div class="col-md-6">
        @*Calendar*@
		<div class="row">
         <Calendar id="calendar" OnChange=@OnChange></Calendar>
         <div class="options">

	    <div class="option" id="log">
	</div>
        </div>
        
        @*Random Pictures*@
		<div class="row">
            <div class="card border-3">
            @((MarkupString)RandomPictureEmbedder.GetEmbeddedElement())
            </div>

        </div>
	    </div>
</div>
</div>

@code {

    string plantImage = "";
    string plantText = "";

    List<DailyTask> tasks = new List<DailyTask>();
    List<DailyTask> Tasks 
    {
        get => this.tasks;
        set
        {
            this.tasks = value;
            StateHasChanged();
        }
    }

    DateTime date = DateTime.Now.Date;

    Guid userId = default(Guid);

    protected override async Task OnInitializedAsync()
    {
        var plant = Plants.GetRandom();

        plantImage = plant.Key;
        plantText = plant.Value;

        this.userId = this.userService.GetUserId();

        await this.GetTasksAsync();
    }

    public async Task CycleTimeOfDayAsync(DailyTask task)
    {
        await this.dailyTaskRepository.CycleTimeOfDayAsync(this.userId, task.Id);

        await this.GetTasksAsync();
    }

    private void OnChange(Event eventObj)
    {
        CalendarChangeEventDetail eventDetail = eventObj["Detail"];
        this.date = DateTime.Parse(eventDetail.Value.First()).Date;

        this.GetTasksAsync();
    }

    public async Task AddTaskAsync()
    {
        await this.dailyTaskRepository.CreateTaskAsync(this.userId, this.date.Date, TimeOfDay.Morning);
        await this.GetTasksAsync();
    }

    public string GetBadgeColor(TimeOfDay timeOfDay)
    {
        switch (timeOfDay)
        {
            case TimeOfDay.Morning:
                return "btn-primary";
            case TimeOfDay.Midday:
                return "btn-danger";
            case TimeOfDay.Afternoon:
                return "btn-success";
            case TimeOfDay.Evening:
                return "btn-secondary";
            case TimeOfDay.Night:
                return "btn-dark";
        }
        return "btn-light";
    }

    public async Task GetTasksAsync()
    {
        this.Tasks = (await this.dailyTaskRepository.GetTasksAsync(this.userId, this.date)).OrderBy(x=>x.TimeOfDay).ThenBy(x=>x.Id).ToList();
    }

    public async Task DeleteTaskAsync(DailyTask task)
    {
        await this.dailyTaskRepository.DeleteTaskAsync(this.userId, task.Id);
        this.Tasks.Remove(task);
    }

    public async Task CompleteTaskAsync(DailyTask task)
    {
        await this.dailyTaskRepository.CompleteTaskAsync(this.userId, task.Id);
        this.Tasks.Remove(task);
    }

    string? updatedNote = "";

    async Task ShowInlineDialog(DailyTask task)
    {
        this.updatedNote = task.Note;
        var result = await DialogService.OpenAsync("Edit Task", ds =>
        @<div>
         <RadzenTemplateForm Data="@task" Submit="@(async (DailyTask args) => { await this.UpdateTaskNoteAsync(task.Id, this.updatedNote, ds); })">
            <RadzenTextBox @bind-Value=@this.updatedNote ></RadzenTextBox>
            <div class="row">
                <div class="col-md-12">
                    <RadzenButton Text="Ok" ButtonType="ButtonType.Submit" Style="margin-bottom: 10px; width: 150px" />
                    <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary"  Style="margin-bottom: 10px; width: 150px"/>
                </div>
            </div>
            </RadzenTemplateForm>
        </div>
    );
    }
     
    public async Task UpdateTaskNoteAsync(int taskId, string? note, DialogService ds)
    {
        await this.dailyTaskRepository.UpdateTaskNoteAsync(this.userId, taskId, note);
        ds.Close(true);
        await this.GetTasksAsync();
    }
}